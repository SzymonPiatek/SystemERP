generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean  @default(false)
  isPasswordResetting Boolean @default(false)
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events         Event[]   @relation("OwnedEvents")
  invitedEvents  EventInvitation[] @relation("InvitedToEvents")
  notes  Note[]
}

model Invite {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  companyId  Int?
  roleId     Int
  token      String   @unique
  expiresAt  DateTime @default(now())

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
}

model Company {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  country         String
  voivodeship     String?
  district        String?
  commune         String?
  city            String
  zipCode         String
  street          String
  houseNumber     String
  apartmentNumber String?
  nip             String
  regon           String

  users     User[]
  invities  Invite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  permissionRole PermissionRole[]
  Profile        Profile[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Permission {
  id      Int    @id @default(autoincrement())
  name    String @unique
  action  String
  subject String

  permissionRole PermissionRole[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model PermissionRole {
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([permissionId, roleId])
}

model File {
  id          Int      @id @default(autoincrement())
  filePath    String
  fileName    String
  fileType    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profiles    Profile[]
}

model Profile {
  id             Int     @id @default(autoincrement())
  profilePicId   Int?
  roleId         Int
  userId         Int     @unique
  profilePic     File?   @relation(fields: [profilePicId], references: [id])
  role           Role    @relation(fields: [roleId], references: [id])
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  isAllDay    Boolean            @default(false)
  startDate   DateTime
  endDate     DateTime
  ownerId     Int
  owner       User               @relation("OwnedEvents", fields: [ownerId], references: [id], onDelete: Cascade)
  invitations EventInvitation[]  @relation("EventInvitations")

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model EventInvitation {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation("EventInvitations", fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation("InvitedToEvents", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Note {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime?
  ownerId     Int
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
