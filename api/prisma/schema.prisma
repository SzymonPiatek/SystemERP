generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  firstName       String
  lastName        String
  isActive        Boolean       @default(false)
  company         Company?      @relation(fields: [companyId], references: [id])
  companyId       Int?
  profile         Profile?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String
  country         String
  voivodeship     String?
  district        String?
  commune         String?
  city            String
  zipCode         String
  street          String
  houseNumber     String
  apartmentNumber String?
  nip             String
  regon           String

  users           User[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Role {
  id              Int           @id @default(autoincrement())
  name            String        @unique

  permissionRole  PermissionRole[]
  Profile         Profile[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Permission {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  action          String
  subject         String

  permissionRole  PermissionRole[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PermissionRole {
  permission      Permission    @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId    Int
  role            Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId          Int

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@id([permissionId, roleId])
}

model Profile {
  id                 Int        @id @default(autoincrement())
  profilePicPath     String?
  roleId             Int
  userId             Int        @unique
  role               Role       @relation(fields: [roleId], references: [id])
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}
